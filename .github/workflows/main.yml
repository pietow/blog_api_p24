name: CI

on:
  push:
    branches:
      - PREP
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code from the repository
      - name: Check out code
        uses: actions/checkout@v3

      # Step 2: Create .env file with necessary variables
      - name: Create .env file
        run: |
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_HOST=postgres_db" >> .env
          echo "DB_PORT=5432" >> .env

      # Step 3: Build the Docker images
      - name: Build Docker images
        run: docker compose build

      # Step 4: Start PostgreSQL container separately
      - name: Start PostgreSQL container
        run: |
          docker run -d \
          --name postgres_db \
          --network app-network \
          -e POSTGRES_USER=${{ secrets.DB_USER }} \
          -e POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }} \
          -e POSTGRES_DB=${{ secrets.DB_NAME }} \
          -p 5432:5432 \
          postgres:latest

      # Step 5: Wait for the PostgreSQL service to be ready
      - name: Wait for Postgres to be ready
        run: |
          until docker exec postgres_db pg_isready -U ${{ secrets.DB_USER }}; do
            echo "Waiting for Postgres...";
            sleep 3;
          done

      # Step 6: Start all services with Docker Compose
      - name: Start services with Docker Compose
        run: docker compose up -d

      # Step 7: Run the Django tests
      - name: Run tests
        run: docker compose exec web python manage.py test

      # Step 8: Teardown - Stop and remove the containers to clean up the environment
      - name: Teardown containers
        run: |
          docker compose down
          docker stop postgres_db
          docker rm postgres_db

